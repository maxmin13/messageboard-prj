- name: Deploy Django framework and web application
  hosts:
    - class_webservices
    
  gather_facts: false
  
  vars_files:
    - variables/provision.yml
    - variables/secrets.yml
    
  vars:
    ansible_python_interpreter: "{{ aws.instance.python.install.dir.path }}/{{ aws.instance.python.executable }}"    
    PYTHON_VERSION: "{{ aws.instance.python.version }}"
    PROJECT_HOME: "{{ aws.instance.programs.install.dir.path }}/{{ aws.instance.project.root.dir.name }}"  
          
  pre_tasks:
  
    - name: 'Get datacenter.json content'
      set_fact:
        datacenter_config: "{{ lookup('file', '{{ messageboard_dir }}/config/datacenter.json') | from_json }}"
        
    - name: 'Get instance DNS domain'
      set_fact:
        instance_dns_domain: "{{ datacenter_config | json_query(jquery) }}"
      vars:
        jquery: "Datacenter.Instances[?Name=='{{ instance_name }}'] | [0].DnsDomain"    

    - name: 'Configuration variables'
      ansible.builtin.debug:
        msg:
          - 'SSH instance port: {{ ansible_port }}'
          - 'SSH instance user: {{ ansible_user }}'
          - 'SSH instance key: {{ ansible_private_key_file }}'
          - 'AWS instance domain: {{ instance_dns_domain }}'
          - 'Python version used in the host: {{ PYTHON_VERSION }}'
                               
  tasks:
   
    - name: Create download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488   
                   
    - name: Get the project from Github (with agent forwarding)
      become: false
      ansible.builtin.git:
        repo: "{{ aws.instance.project.github.repository.url }}"
        dest: "{{ aws.instance.download.dir.path }}"
        version: master
        accept_hostkey: true
        update: false
 
    - name: Delete project directory
      become: true
      ansible.builtin.file:
        path: "{{ PROJECT_HOME }}"
        state: absent 
        
    - name: Create project directory
      become: true
      ansible.builtin.file:
        path: "{{ PROJECT_HOME }}"
        state: directory               
 
    - name: Copy project files
      become: true
      ansible.builtin.command: "mv {{ item }} {{ PROJECT_HOME }}"
      with_items:
      - "{{ aws.instance.download.dir.path }}/project/manage.py"
      - "{{ aws.instance.download.dir.path }}/project/django_project" 
      - "{{ aws.instance.download.dir.path }}/project/apps" 
      - "{{ aws.instance.download.dir.path }}/project/templates" 
              
    - name: Copy project environment file
      become: true
      ansible.builtin.template:
        src: env/env.j2
        dest: "{{ PROJECT_HOME }}/django_project/.env"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0400                
      
    - name: Run database migrations
      community.general.django_manage:
        command: migrate
        project_path: "{{ PROJECT_HOME }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
      environment:   
        DATABASE_URL: "{{ aws.instance.postgresql.database.connection.url }}"      

    - name: Collect static files
      become: true
      community.general.django_manage:
        command: collectstatic
        project_path: "{{ PROJECT_HOME }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"                  
        
    - name: Restart Gunicorn
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: gunicorn
   
    - name: Restart Nginx
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: nginx
    
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'Django site admin' not in result.content"  
      ignore_errors: true  
      
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'Message board posts' not in result.content" 
      ignore_errors: true         
            
  post_tasks:
  
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent 
         
