- name: Deploy Django framework
  hosts:
    - class_cms
    
  gather_facts: false
  
  vars_files:
    - variables/vars.yml
    - variables/provision.yml
    - variables/secrets.yml
          
  pre_tasks:
  
    - name: 'Get datacenter.json content'
      set_fact:
        datacenter_config: "{{ lookup('file', '{{ project_dir }}/config/datacenter.json') | from_json }}"
        
    - name: 'Get instance DNS domain'
      set_fact:
        instance_dns_domain: "{{ datacenter_config | json_query(jquery) }}"
      vars:
        jquery: "Datacenter.Instances[?Name=='{{ aws_instance_name }}'] | [0].DnsDomain"    

    - name: 'Controller host configuration'
      ansible.builtin.debug:
        msg:
        - "project directory: {{ project_dir}}"
        - "project name: {{ project_dir}}"
        - "instance_dns_domain: {{ instance_dns_domain }}"
        - "ssh port: {{ ansible_port }}"
        - "ssh user: {{ ansible_user }}"
        - "ssh key: {{ ansible_private_key_file }}"           
       
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent   
 
  tasks:
  
    - name: Create download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488   
            
    - name: Get the project from Github (with agent forwarding)
      become: false
      ansible.builtin.git:
        repo: "{{ aws.instance.project.repository.url }}"
        dest: "{{ aws.instance.download.dir.path }}"
        version: master
        accept_hostkey: true
        update: false
            
    - name: Remove project directory
      ansible.builtin.file:
        path: "{{ aws.instance.project.dir.path }}"
        state: absent 
        
    - name: Create project directory
      ansible.builtin.file:
        path: "{{ aws.instance.project.dir.path }}"
        state: directory               
 
    - name: Move project files
      ansible.builtin.command: "mv {{ item }} {{ aws.instance.project.dir.path }}"
      with_items:
      - "{{ aws.instance.download.dir.path }}/manage.py"
      - "{{ aws.instance.download.dir.path }}/{{ aws.instance.project.name }}" 
      - "{{ aws.instance.download.dir.path }}/apps" 
      - "{{ aws.instance.download.dir.path }}/templates" 

    - name: Django environment file
      ansible.builtin.template:
        src: django/env.j2
        dest: "{{ aws.instance.project.dir.path }}/.env"
        mode: 0400 
              
    - name: Run database migrations
      community.general.django_manage:
        command: migrate
        project_path: "{{ aws.instance.project.dir.path }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
      environment:   
        DATABASE_URL: "{{ aws.instance.postgresql.database.url }}"
        
    - name: Collect static files
      community.general.django_manage:
        command: collectstatic
        project_path: "{{ aws.instance.project.dir.path }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
       
    - name: Restart Gunicorn 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: gunicorn
      
    - name: Restart Nginx 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: nginx
    
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'messageboard app' not in result.content"       

  post_tasks:
  
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent 
         
