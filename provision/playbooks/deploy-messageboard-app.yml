- name: Deploys messagebord apps
  hosts:
    - class_cms
    
  gather_facts: false
  
  vars_files:
    - variables/vars.yml
    - variables/aws.yml
    - variables/secrets.yml
    
  handlers:
    - name: 'Restart nginx'
      ansible.builtin.service:
        name: nginx
        state: restarted    
    - name: 'Restart gunicorn'
      ansible.builtin.service:
        name: gunicorn
        state: restarted   
         
  pre_tasks:
      
    - name: Controller host configuration
      ansible.builtin.debug:
        msg:
        - "dns domain: {{ instance_dns_domain }}"
        - "ssh port: {{ ansible_port }}"
        - "ssh user: {{ ansible_user }}"
        - "ssh key: {{ ansible_ssh_private_key_file }}"
  
   ########################################### - name: Upgrade all packages
    ############################  ansible.builtin.yum: name=* state=latest 
                 
    - name: Delete download directory
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent        
 
  tasks:
  
    - name: Create download directory
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488   
            
    - name: Get the project from Github (with agent forwarding)
      become: false
      ansible.builtin.git:
        repo: "{{ aws.instance.project.repository.url }}"
        dest: "{{ aws.instance.download.dir.path }}"
        version: master
        accept_hostkey: true
        update: false
            
    - name: Remove project directory
      ansible.builtin.file:
        path: "{{ aws.instance.project.dir.path }}"
        state: absent 
        
    - name: Create project directory
      ansible.builtin.file:
        path: "{{ aws.instance.project.dir.path }}"
        state: directory               
 
    - name: Move project files
      ansible.builtin.command: "mv {{ item }} {{ aws.instance.project.dir.path }}"
      with_items:
      - "{{ aws.instance.download.dir.path }}/manage.py"
      - "{{ aws.instance.download.dir.path }}/{{ aws.instance.project.name }}" 
      - "{{ aws.instance.download.dir.path }}/apps" 
      - "{{ aws.instance.download.dir.path }}/templates" 

    - name: Django environment file
      ansible.builtin.template:
        src: django/env.j2
        dest: "{{ aws.instance.project.dir.path }}/.env"
        mode: 0400 
              
    - name: Run database migrations
      community.general.django_manage:
        command: migrate
        project_path: "{{ aws.instance.project.dir.path }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
      environment:   
        DATABASE_URL: "postgres://{{ aws.instance.postgresql.database.user.admin.name }}:{{ aws.instance.postgresql.database.user.admin.password }}@localhost/{{ aws.instance.postgresql.database.name }}"

    - name: Collect static files
      community.general.django_manage:
        command: collectstatic
        project_path: "{{ aws.instance.project.dir.path }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
       
    - name: Restart gunicorn 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: gunicorn
      
    - name: Restart nginx 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: nginx
    
 #   - name: 'Test it'
 #     become: false  
 #     ansible.builtin.uri:
 #       url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
 #       method: GET
 #       status_code: 200
 #       validate_certs: false
 #       return_content: true
 #     register: result
 #     failed_when: "'Django site admin' not in result.content"       

 # post_tasks:
  #
   # - name: Delete download directory
    #  ansible.builtin.file:
     #   path: "{{ aws.instance.download.dir.path }}"
      #  state: absent 
         