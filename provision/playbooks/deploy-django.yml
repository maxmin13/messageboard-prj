- name: Deploy Django framework
  hosts:
    - class_cms
    
  gather_facts: false
  
  vars_files:
    - variables/vars.yml
    - variables/aws.yml
    - variables/secrets.yml
    - "{{ lookup('ansible.builtin.env', 'DATACENTER_PROJECT_DIR') }}/config/datacenter.json"
    
  handlers:
    - name: 'Restart Nginx'
      ansible.builtin.service:
        name: nginx
        state: restarted    
 
  pre_tasks:
  
    - name: 'Controller host configuration'
      ansible.builtin.debug:
        msg:
        - "domain: {{ instance_dns_domain }}"
        - "ssh port: {{ ansible_port }}"
        - "ssh user: {{ ansible_user }}"
        - "ssh key: {{ ansible_private_key_file }}"  
  
#    - name: Upgrade all packages
#      become: true
#      ansible.builtin.yum: name=* state=latest 
      
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent       
                  
  tasks:
   
    - name: Create download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488   
   
    - name: Create virtualenv
      become: true
      ansible.builtin.pip:
        name:
          - pip
          - wheel
          - setuptools
        state: latest
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        virtualenv_command: "{{ aws.instance.python.install.dir.path }}/{{ aws.instance.python.executable }} -m venv"   

    - name: Upload requirements
      copy:
        src: env/requirements.txt
        dest: "{{ aws.instance.download.dir.path }}"
        mode: '0644'

    - name: Install required packages
      become: true
      ansible.builtin.pip:
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        requirements: "{{ aws.instance.download.dir.path }}/requirements.txt"

    - name: Install psycopg2 for ansible to be able to create postgresql users
      become: true
      pip: name=psycopg2-binary
      
    - name: 'Create database user'
      become: true
      become_user: postgres       
      community.general.postgresql_user:
        state: present
        name: "{{ aws.instance.postgresql.database.user.admin.name }}"
        password: "{{ aws.instance.postgresql.database.user.admin.password }}"
     
    - name: 'Create the database'
      become: true
      become_user: postgres
      postgresql_db:
        name: "{{ aws.instance.postgresql.database.name }}"
        owner: "{{ aws.instance.postgresql.database.user.admin.name }}"
        encoding: UTF8
   
    - name: 'Grant user access'
      become: true
      become_user: postgres      
      community.general.postgresql_privs:
        type: database
        database: "{{ aws.instance.postgresql.database.name }}"
        roles: "{{ aws.instance.postgresql.database.user.admin.name }}"
        grant_option: no
        privs: all  

    - name: 'Restart Postgresql services'
      become: true
      ansible.builtin.service:
        name: postgresql-14
        state: restarted
        enabled: true         
 
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent 
        
    - name: Create download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 488        
             
    - name: Get the project from Github (with agent forwarding)
      become: false
      ansible.builtin.git:
        repo: "{{ aws.instance.project.repository.url }}"
        dest: "{{ aws.instance.download.dir.path }}"
        version: master
        accept_hostkey: true
        update: false
 
    - name: Delete project directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.project.dir.path }}"
        state: absent 
        
    - name: Create project directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.project.dir.path }}"
        state: directory               
 
    - name: Move project files
      become: true
      ansible.builtin.command: "mv {{ item }} {{ aws.instance.project.dir.path }}"
      with_items:
      - "{{ aws.instance.download.dir.path }}/manage.py"
      - "{{ aws.instance.download.dir.path }}/{{ aws.instance.project.name }}" 
      - "{{ aws.instance.download.dir.path }}/apps" 
      - "{{ aws.instance.download.dir.path }}/templates"  
      
    - name: Run database migrations
      community.general.django_manage:
        command: migrate
        project_path: "{{ aws.instance.project.dir.path }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
      environment:   
        DATABASE_URL: "postgres://{{ aws.instance.postgresql.database.user.admin.name }}:{{ aws.instance.postgresql.database.user.admin.password }}@localhost/{{ aws.instance.postgresql.database.name }}"

    - name: Collect static files
      become: true
      community.general.django_manage:
        command: collectstatic
        project_path: "{{ aws.instance.project.dir.path }}"  
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        
    - name: Django environment file
      become: true
      ansible.builtin.template:
        src: django/env.j2
        dest: "{{ aws.instance.project.dir.path }}/.env"
        mode: 0400          
        
    - name: Remove the Nginx config file
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.nginx.install.dir.path }}/nginx.conf"
        state: absent

    - name: Deploy Nginx config file
      become: true
      ansible.builtin.template:
        src: nginx/nginx.conf.j2
        dest: "{{ aws.instance.nginx.install.dir.path }}/nginx.conf"
        mode: 0400
      
    - name: Gunicorn socket config file
      become: true
      ansible.builtin.template:
        src: gunicorn/gunicorn.socket.j2
        dest: "/etc/systemd/system/gunicorn.socket"
        mode: 0400 
        
    - name: Gunicorn service file
      become: true
      ansible.builtin.template:
        src: gunicorn/gunicorn.service.j2
        dest: "/etc/systemd/system/gunicorn.service"
        mode: 0400                       
        
    - name: Create Gunicorn directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.gunicorn.config.dir.path }}"
        state: directory         
   
    - name: Gunicorn config file
      become: true
      ansible.builtin.template:
        src: gunicorn/gunicorn.conf.py.j2
        dest: "{{ aws.instance.gunicorn.config.dir.path }}/gunicorn.conf.py"
        mode: 0400  
        
    - name: Start Gunicorn socket
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: gunicorn.socket
      
    - name: Start Gunicorn
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: gunicorn
   
    - name: Restart Nginx
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: nginx
    
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'Django site admin' not in result.content"    
      
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'Message board posts' not in result.content"          
      
    - name: Check Django admin app superuser exists
      become: true
      community.general.django_manage:
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        project_path: "{{ aws.instance.project.dir.path }}"
        command: shell -c 'import sys; from django.contrib.auth.models import User; sys.exit(0 if User.objects.filter(username="{{ aws.instance.project.django.superuser.name }}").count() > 0 else 1)'
      register: checksuperuser
      ignore_errors: True
      changed_when: False      

    - name: Create Django admin app superuser
      become: true
      community.general.django_manage:
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        project_path: "{{ aws.instance.project.dir.path }}"
        command: "createsuperuser --noinput --username={{ aws.instance.project.django.superuser.name }} --email={{ aws.instance.project.django.superuser.name }}@gmail.com"     
      ignore_errors: True
      environment: 
        DATABASE_URL: "postgres://{{ aws.instance.postgresql.database.user.admin.name }}:{{ aws.instance.postgresql.database.user.admin.password }}@localhost/{{ aws.instance.postgresql.database.name }}"
        DJANGO_SUPERUSER_PASSWORD: "{{ aws.instance.project.django.superuser.password }}" 
      when: checksuperuser is not succeeded
      
  post_tasks:
  
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent 
         