- name: Deploy Django framework and web application
  hosts:
    - class_webservices
    
  gather_facts: false
  
  vars_files:
    - variables/provision.yml
    - variables/secrets.yml
    
  vars:
    ansible_python_interpreter: "{{ aws.instance.python.install.dir.path }}/{{ aws.instance.python.executable }}"    
    PROJECT_HOME: "{{ aws.instance.programs.install.dir.path }}/{{ aws.instance.project.root.dir.name }}" 
          
  pre_tasks:
  
    - name: 'Get datacenter.json content'
      set_fact:
        datacenter_config: "{{ lookup('file', '{{ messageboard_dir }}/config/datacenter.json') | from_json }}"
        
    - name: 'Get instance DNS domain'
      set_fact:
        instance_dns_domain: "{{ datacenter_config | json_query(jquery) }}"
      vars:
        jquery: "Datacenter.Instances[?Name=='{{ instance_name }}'] | [0].DnsDomain"    

    - name: 'Controller host configuration'
      ansible.builtin.debug:
        msg:
          - 'SSH instance port: {{ ansible_port }}'
          - 'SSH instance user: {{ ansible_user }}'
          - 'SSH instance key: {{ ansible_private_key_file }}'
          - 'AWS instance domain: {{ instance_dns_domain }}'
          - 'Python version used in the host: {{ aws.instance.python.version }}'
                               
  tasks:
 
    - name: Remove Gunicorn systemd socket file
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.gunicorn.systemd.socket.file.path  }}"
        state: absent
              
    - name: Copy Gunicorn systemd socket file
      become: true
      ansible.builtin.template:
        src: gunicorn/gunicorn.socket.j2
        dest: "{{ aws.instance.gunicorn.systemd.socket.file.path  }}"
        mode: 0400 
        
    - name: Remove Gunicorn systemd service file
      become: true
      ansible.builtin.file:
        path: "/etc/systemd/system/gunicorn.service" 
        state: absent        
        
    - name: Copy Gunicorn service file
      become: true
      ansible.builtin.template:
        src: gunicorn/gunicorn.service.j2
        dest: "/etc/systemd/system/gunicorn.service" 
        mode: 0400   
        
    - name: Delete Gunicorn configuration directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.gunicorn.config.dir.path }}"
        state: absent                             
        
    - name: Create Gunicorn configuration directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.gunicorn.config.dir.path }}"
        state: directory         
   
    - name: Copy Gunicorn config file
      become: true
      ansible.builtin.template:
        src: gunicorn/gunicorn.conf.py.j2
        dest: "{{ aws.instance.gunicorn.config.dir.path }}/gunicorn.conf.py"
        mode: 0400  
        
    - name: Restart Gunicorn socket
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: gunicorn.socket
      
    - name: Restart Gunicorn
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: gunicorn
   
    - name: Restart Nginx
      become: true 
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: nginx
    
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}/admin'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'Django site admin' not in result.content"  
      ignore_errors: true  
      
    - name: 'Test it: https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
      become: false  
      ansible.builtin.uri:
        url: 'https://{{ instance_dns_domain }}:{{ aws.instance.nginx.https.port }}'
        method: GET
        status_code: 200
        validate_certs: false
        return_content: true
      register: result
      failed_when: "'Message board posts' not in result.content" 
      ignore_errors: true         
      
    - name: Check Django admin app superuser exists
      become: true
      community.general.django_manage:
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        project_path: "{{ PROJECT_HOME }}"
        command: shell -c 'import sys; from django.contrib.auth.models import User; sys.exit(0 if User.objects.filter(username="{{ django_superuser_name }}").count() > 0 else 1)'
      register: checksuperuser
      ignore_errors: True
      changed_when: False      

    - name: Create Django admin app superuser
      become: true
      community.general.django_manage:
        virtualenv: "{{ aws.instance.project.venv.dir.path }}"
        project_path: "{{ PROJECT_HOME }}"
        command: "createsuperuser --noinput --username={{ django_superuser_name }} --email={{ django_superuser_email_address }}"     
      ignore_errors: True
      environment: 
        DATABASE_URL: "{{ aws.instance.postgresql.database.connection.url }}"
        DJANGO_SUPERUSER_PASSWORD: "{{ django_superuser_password }}" 
      when: checksuperuser is not succeeded
      
  post_tasks:
  
    - name: Delete download directory
      become: true
      ansible.builtin.file:
        path: "{{ aws.instance.download.dir.path }}"
        state: absent 
         
